{"ast":null,"code":"import _asyncToGenerator from \"/Users/pushpendra.khandelwal/Desktop/web3_training/tic-tac-toe/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Web3 from 'web3';\nimport CONSTANTS from '../constant';\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class ContractService {\n  constructor(router) {\n    var _this = this;\n    this.router = router;\n    this.loader$ = new BehaviorSubject(false);\n    this.moveIndex$ = new BehaviorSubject(null);\n    this.fetchAndSetActiveAddress = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        let addresses = yield window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (!addresses.length) {\n          _this.activeAddress = yield window.ethereum.enable();\n        }\n      } catch (e) {\n        return null;\n      }\n    });\n    this.getContract = () => {\n      return new window.web3.eth.Contract(CONSTANTS.abi, CONSTANTS.contractAddress);\n    };\n    // Event can be GameStarted/GameInitiated/GameEnded/PlayerMoved\n    this.parseData = event => {\n      let players = event.returnValues?.room?.players;\n      let values = event.returnValues;\n      return {\n        'id': values.gameId,\n        'name': players[0].playerName + \"vs\" + players[1].playerName ?? \"_\",\n        'currentPlayerIndex': values.room.activePlayer,\n        'currentPlayerName': players[values.room.activePlayer ?? 0],\n        'winnerName': values.room.winnerPlayer.playerName,\n        'player1': players[0].playerName,\n        'player2': players[1].playerName,\n        'gameState': this.getState(values.room.gameState),\n        'moveIndex': values.moveIndex,\n        'moveValue': values.room.activePlayer == 0 ? \"X\" : \"0\"\n      };\n    };\n    this.getState = state => {\n      switch (state) {\n        case 0:\n          return \"NOT STARTED\";\n        case 1:\n          return \"RUNNING\";\n        case 2:\n          return \"GAME ENDED WITH WINNER\";\n        default:\n          return \"DRAW\";\n      }\n    };\n    this.openMetamask = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.loader$.next(true);\n      window.web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n      yield _this.fetchAndSetActiveAddress();\n      return _this.activeAddress;\n    });\n    this.joinGame = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (data) {\n        _this.loader$.next(true);\n        let accaddress = yield _this.getAccounts();\n        try {\n          // TODO: Loading State - true;\n          const response = yield _this.getContract().methods.joinRoom({\n            playerAddress: accaddress[0],\n            playerName: data.name\n          }).send({\n            from: accaddress[0]\n          });\n          // TODO: Loading State - false;\n          _this.gameID = response?.events?.GameStarted?.returnValues?.gameId;\n          // Route to \n          return _this.gameID;\n        } catch (error) {\n          const errorMessage = error;\n        }\n      });\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    this.move = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (data) {\n        _this.loader$.next(true);\n        let accaddress = yield _this.getAccounts();\n        try {\n          // TODO: Loading State - true;\n          const response = yield _this.getContract().methods.move(_this.gameID, data).send({\n            from: accaddress[0]\n          });\n          // TODO: Loading State - false;\n          console.log(\"Player moved on \", response?.events?.PlayerMoved?.returnValues?.moveIndex);\n          return response?.events?.PlayerMoved?.returnValues?.moveIndex;\n        } catch (error) {\n          const errorMessage = error;\n        }\n      });\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    this.ping = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (data) {\n        let accaddress = yield _this.getAccounts();\n        try {\n          // TODO: Loading State - true;\n          const response = yield _this.getContract().methods.updateRoomIfExpired(_this.gameID).send({\n            from: accaddress[0]\n          });\n          // TODO: Loading State - false;\n          console.log(\"Game State\", response?.events?.PlayerMoved?.returnValues?.room.state);\n        } catch (error) {\n          const errorMessage = error;\n        }\n      });\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    this.isGameRunning = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (gameId) {\n        try {\n          let accaddress = yield _this.getAccounts();\n          const response = yield _this.getContract().methods.isGameRunning(_this.gameID).call({\n            from: accaddress[0]\n          });\n          return response;\n        } catch (error) {\n          console.log(error);\n          return null;\n        }\n      });\n      return function (_x4) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n    window.web3 = new Web3(window.ethereum);\n    let options = {\n      filter: {\n        value: []\n      },\n      fromBlock: 0\n    };\n    this.getContract().events.GameEnded(options).on('data', response => {\n      console.log(response.events.returnValues, \"Ended\");\n      let gameState = this.parseData(response.events).gameState;\n      alert(`Game State: ${gameState}`);\n      this.router.navigateByUrl(`/home`);\n    });\n    this.getContract().events.GameStarted(options).on('data', response => this.router.navigateByUrl(`/game/${this.parseData(response?.events?.GameStarted)}`));\n    this.getContract().events.GameInitiated(options).on('data', response => this.router.navigateByUrl(`/game/${this.parseData(response?.events?.GameInitiated)}`));\n    this.getContract().events.PlayerMoved(options).on('data', response => this.moveIndex$.next(this.parseData(response.events.PlayerMoved)));\n  }\n}\nContractService.ɵfac = function ContractService_Factory(t) {\n  return new (t || ContractService)(i0.ɵɵinject(i1.Router));\n};\nContractService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContractService,\n  factory: ContractService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Web3","CONSTANTS","BehaviorSubject","ContractService","constructor","router","addresses","window","ethereum","request","method","length","activeAddress","enable","e","web3","eth","Contract","abi","contractAddress","event","players","returnValues","room","values","gameId","playerName","activePlayer","winnerPlayer","getState","gameState","moveIndex","state","loader$","next","givenProvider","fetchAndSetActiveAddress","data","accaddress","getAccounts","response","getContract","methods","joinRoom","playerAddress","name","send","from","gameID","events","GameStarted","error","errorMessage","move","console","log","PlayerMoved","updateRoomIfExpired","isGameRunning","call","options","filter","value","fromBlock","GameEnded","on","parseData","alert","navigateByUrl","GameInitiated","moveIndex$","factory","providedIn"],"sourceRoot":"","sources":["/Users/pushpendra.khandelwal/Desktop/web3_training/tic-tac-toe/ui/src/app/services/contract.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport Web3 from 'web3';\nimport CONSTANTS from '../constant';\nimport { BehaviorSubject } from \"rxjs\";\nimport { Router } from \"@angular/router\";\n\ndeclare const window: any;\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContractService {\n  public loader$ = new BehaviorSubject<boolean>(false);\n\n  public moveIndex$ = new BehaviorSubject<any>(null);\n\n  window: any;\n  gameID: any;\n  activeAddress: any;\n\n  constructor(private router: Router) {\n    window.web3 = new Web3(window.ethereum);\n\n    let options = {\n      filter: {\n          value: [],\n      },\n      fromBlock: 0\n    }\n    this.getContract().events.GameEnded(options)\n    .on('data', (response: any) => {\n      console.log(response.events.returnValues, \"Ended\");\n      let gameState = this.parseData(response.events).gameState\n      alert(`Game State: ${gameState}`)\n      this.router.navigateByUrl(`/home`);\n    });\n\n    this.getContract().events.GameStarted(options)\n    .on('data', (response: any) => this.router.navigateByUrl(`/game/${this.parseData(response?.events?.GameStarted)}`));\n\n    this.getContract().events.GameInitiated(options)\n    .on('data', (response: any) => this.router.navigateByUrl(`/game/${this.parseData(response?.events?.GameInitiated)}`));\n\n    this.getContract().events.PlayerMoved(options)\n    .on('data', (response: any) => this.moveIndex$.next(this.parseData(response.events.PlayerMoved)));\n  };\n\n\n  private fetchAndSetActiveAddress = async () => {\n    try {\n      let addresses = await window.ethereum.request({ method: 'eth_accounts' });\n      if (!addresses.length) {\n        this.activeAddress = await window.ethereum.enable();\n      }\n    } catch (e) {\n      return null;\n    }\n  };\n\n  private getContract = () => {\n    return new window.web3.eth.Contract(\n      CONSTANTS.abi,\n      CONSTANTS.contractAddress\n    );\n  };\n\n\n  // Event can be GameStarted/GameInitiated/GameEnded/PlayerMoved\n  public parseData = (event: any) => {\n    let players = event.returnValues?.room?.players;\n    let values = event.returnValues;\n    return {\n      'id': values.gameId,\n      'name': players[0].playerName + \"vs\" + players[1].playerName ?? \"_\",\n      'currentPlayerIndex': values.room.activePlayer,\n      'currentPlayerName': players[values.room.activePlayer ?? 0],\n      'winnerName': values.room.winnerPlayer.playerName,\n      'player1': players[0].playerName,\n      'player2': players[1].playerName,\n      'gameState': this.getState(values.room.gameState),\n      'moveIndex': values.moveIndex,\n      'moveValue': values.room.activePlayer == 0 ? \"X\" : \"0\",\n    };\n  }\n\n  private getState = (state: number) => {\n    switch (state) {\n      case 0:\n        return \"NOT STARTED\";\n      case 1:\n        return \"RUNNING\";\n      case 2: \n        return \"GAME ENDED WITH WINNER\";\n      default:\n        return \"DRAW\";      \n    }\n  }\n\n  public openMetamask = async () => {\n    this.loader$.next(true);\n    window.web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n    await this.fetchAndSetActiveAddress();\n    return this.activeAddress;\n  };\n\n  public joinGame = async (data: any) => {\n    this.loader$.next(true);\n    let accaddress = await this.getAccounts();\n    try {\n      // TODO: Loading State - true;\n      const response = await this.getContract().methods\n        .joinRoom({ playerAddress: accaddress[0], playerName: data.name })\n        .send({ from: accaddress[0] });\n\n      // TODO: Loading State - false;\n\n      this.gameID = response?.events?.GameStarted?.returnValues?.gameId;\n\n      // Route to \n      return this.gameID;\n    } catch (error) {\n      const errorMessage = error;\n    }\n  };\n\n  public move = async (data: any) => {\n    this.loader$.next(true);\n    let accaddress = await this.getAccounts();\n    try {\n      // TODO: Loading State - true;\n      const response = await this.getContract().methods\n        .move(this.gameID, data)\n        .send({ from: accaddress[0] });\n      // TODO: Loading State - false;\n      console.log(\"Player moved on \", response?.events?.PlayerMoved?.returnValues?.moveIndex);\n\n      return response?.events?.PlayerMoved?.returnValues?.moveIndex;\n    } catch (error) {\n      const errorMessage = error;\n    }\n  };\n\n  public ping = async (data: any) => {\n    let accaddress = await this.getAccounts();\n    try {\n      // TODO: Loading State - true;\n      const response = await this.getContract().methods\n        .updateRoomIfExpired(this.gameID)\n        .send({ from: accaddress[0] });\n      // TODO: Loading State - false;\n      console.log(\"Game State\", response?.events?.PlayerMoved?.returnValues?.room.state);\n    } catch (error) {\n      const errorMessage = error;\n    }\n  };\n\n  public isGameRunning = async (gameId: number) => {\n    try {\n      let accaddress = await this.getAccounts();\n      const response = await this.getContract().methods\n        .isGameRunning(this.gameID)\n        .call({ from: accaddress[0] });\n      return response;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}