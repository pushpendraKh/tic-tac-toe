{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nlet GamePageComponent = class GamePageComponent {\n  constructor(route, contractService) {\n    this.route = route;\n    this.contractService = contractService;\n    this.isGameRunning = false;\n    this.winner = false;\n    this.activePlayer = \"X\";\n    this.isGameOver = false;\n    this.turnCount = 0;\n    this.gameId = -1;\n    this.gameId = this.route.snapshot.url;\n    this.newGame();\n    this.timer(1);\n  }\n  newGame() {\n    this.board = this.createBoard();\n  }\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < 9; i++) {\n      board.push({\n        id: i,\n        state: null\n      });\n    }\n    return board;\n  }\n  changePlayer(square) {\n    this.isGameRunning = this.contractService.isGameRunning();\n    if (this.isGameRunning && square.state === null) {\n      this.contractService.move(square.id).then(resp => {\n        this.contractService.loader$.next(false);\n        this.winnerName = resp;\n        this.changePlayerTurn(square);\n      });\n      square.state = this.activePlayer;\n    }\n  }\n  changePlayerTurn(squareClicked) {\n    this.updateBoard(squareClicked);\n    if (!this.isGameOver) this.activePlayer = this.activePlayer === \"X\" ? \"O\" : \"X\";\n    this.turnCount++;\n    this.isGameOver = this.isGameOver ? true : false;\n  }\n  updateBoard(squareClicked) {\n    this.board[squareClicked.id].state = squareClicked.state;\n    if (this.isWinner) {\n      this.winner = true;\n      this.isGameRunning = false;\n      this.isGameOver = true;\n    }\n  }\n  get isWinner() {\n    return this.checkDiag() || this.checkRows(this.board, \"row\") || this.checkRows(this.board, \"col\") ? true : false;\n  }\n  checkDiag() {\n    const timesRun = 2,\n      midSquare = this.board[4].state;\n    for (let i = 0; i <= timesRun; i += 2) {\n      let upperCorner = this.board[i].state,\n        lowerCorner = this.board[8 - i].state;\n      if (midSquare && upperCorner && lowerCorner) {\n        if (midSquare === upperCorner && upperCorner === lowerCorner) return true;\n      }\n    }\n    return false;\n  }\n  checkRows(board, mode) {\n    const ROW = mode === \"row\" ? true : false,\n      DIST = ROW ? 1 : 3,\n      INC = ROW ? 3 : 1,\n      NUMTIMES = ROW ? 7 : 3;\n    for (let i = 0; i < NUMTIMES; i += INC) {\n      let firstSquare = board[i].state,\n        secondSquare = board[i + DIST].state,\n        thirdSquare = board[i + DIST * 2].state;\n      if (firstSquare && secondSquare && thirdSquare) {\n        if (firstSquare === secondSquare && secondSquare === thirdSquare) return true;\n      }\n    }\n    return false;\n  }\n  timer(minute) {\n    // let minute = 1;\n    let seconds = minute * 60;\n    let textSec = \"0\";\n    let statSec = 60;\n    const prefix = minute < 10 ? \"0\" : \"\";\n    const timer = setInterval(() => {\n      seconds--;\n      if (statSec != 0) statSec--;else statSec = 59;\n      if (statSec < 10) {\n        textSec = \"0\" + statSec;\n      } else textSec = statSec;\n      this.display = `${prefix}${Math.floor(seconds / 60)}:${textSec}`;\n      if (seconds == 0) {\n        this.display = \"Time Up\";\n        clearInterval(timer);\n      }\n    }, 1000);\n  }\n};\nGamePageComponent = __decorate([Component({\n  selector: \"app-game-page\",\n  templateUrl: \"./game-page.component.html\",\n  styleUrls: [\"./game-page.component.scss\"]\n})], GamePageComponent);\nexport { GamePageComponent };","map":{"version":3,"mappings":"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","names":["Component","GamePageComponent","constructor","route","contractService","gameId","snapshot","url","newGame","timer","board","createBoard","i","push","id","state","changePlayer","square","isGameRunning","move","then","resp","loader$","next","winnerName","changePlayerTurn","activePlayer","squareClicked","updateBoard","isGameOver","turnCount","isWinner","winner","checkDiag","checkRows","timesRun","midSquare","upperCorner","lowerCorner","mode","ROW","DIST","INC","NUMTIMES","firstSquare","secondSquare","thirdSquare","minute","seconds","textSec","statSec","prefix","setInterval","display","Math","floor","clearInterval","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/pushpendra.khandelwal/Desktop/web3_training/tic-tac-toe/ui/src/app/components/game-page/game-page.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { ContractService } from \"src/app/services/contract.service\";\n\n@Component({\n  selector: \"app-game-page\",\n  templateUrl: \"./game-page.component.html\",\n  styleUrls: [\"./game-page.component.scss\"],\n})\nexport class GamePageComponent {\n  board: any;\n  isGameRunning: boolean = false;\n  winner: boolean = false;\n  activePlayer: string = \"X\";\n  isGameOver: boolean = false;\n  turnCount = 0;\n  display: any;\n  winnerName: any;\n\n  gameId: number = -1;\n\n  constructor(private route: Route, private contractService: ContractService) {\n    this.gameId = this.route.snapshot.url\n    this.newGame();\n    this.timer(1);\n  }\n\n  newGame() {\n    this.board = this.createBoard();\n  }\n\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < 9; i++) {\n      board.push({ id: i, state: null });\n    }\n    return board;\n  }\n\n  changePlayer(square: any) {\n    this.isGameRunning = this.contractService.isGameRunning();\n\n    if (this.isGameRunning && square.state === null) {\n      this.contractService.move(square.id).then((resp) => {\n        this.contractService.loader$.next(false);\n        this.winnerName = resp;\n        this.changePlayerTurn(square);\n      });\n      square.state = this.activePlayer;\n    }\n  }\n\n  private changePlayerTurn(squareClicked: any) {\n    this.updateBoard(squareClicked);\n    if (!this.isGameOver)\n      this.activePlayer = this.activePlayer === \"X\" ? \"O\" : \"X\";\n    this.turnCount++;\n    this.isGameOver = this.isGameOver ? true : false;\n  }\n\n  updateBoard(squareClicked: any) {\n    this.board[squareClicked.id].state = squareClicked.state;\n    if (this.isWinner) {\n      this.winner = true;\n      this.isGameRunning = false;\n      this.isGameOver = true;\n    }\n  }\n\n  get isWinner(): boolean {\n    return this.checkDiag() ||\n      this.checkRows(this.board, \"row\") ||\n      this.checkRows(this.board, \"col\")\n      ? true\n      : false;\n  }\n\n  checkDiag() {\n    const timesRun = 2,\n      midSquare = this.board[4].state;\n\n    for (let i = 0; i <= timesRun; i += 2) {\n      let upperCorner = this.board[i].state,\n        lowerCorner = this.board[8 - i].state;\n\n      if (midSquare && upperCorner && lowerCorner) {\n        if (midSquare === upperCorner && upperCorner === lowerCorner)\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  checkRows(board: any, mode: any): boolean {\n    const ROW = mode === \"row\" ? true : false,\n      DIST = ROW ? 1 : 3,\n      INC = ROW ? 3 : 1,\n      NUMTIMES = ROW ? 7 : 3;\n\n    for (let i = 0; i < NUMTIMES; i += INC) {\n      let firstSquare = board[i].state,\n        secondSquare = board[i + DIST].state,\n        thirdSquare = board[i + DIST * 2].state;\n\n      if (firstSquare && secondSquare && thirdSquare) {\n        if (firstSquare === secondSquare && secondSquare === thirdSquare)\n          return true;\n      }\n    }\n    return false;\n  }\n  timer(minute: number) {\n    // let minute = 1;\n    let seconds: number = minute * 60;\n    let textSec: any = \"0\";\n    let statSec: number = 60;\n\n    const prefix = minute < 10 ? \"0\" : \"\";\n\n    const timer = setInterval(() => {\n      seconds--;\n      if (statSec != 0) statSec--;\n      else statSec = 59;\n\n      if (statSec < 10) {\n        textSec = \"0\" + statSec;\n      } else textSec = statSec;\n\n      this.display = `${prefix}${Math.floor(seconds / 60)}:${textSec}`;\n\n      if (seconds == 0) {\n        this.display = \"Time Up\";\n        clearInterval(timer);\n      }\n    }, 1000);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}