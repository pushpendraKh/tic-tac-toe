{"ast":null,"code":"import _asyncToGenerator from \"/Users/pushpendra.khandelwal/Desktop/web3_training/tic-tac-toe/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Web3 from 'web3';\nimport CONSTANTS from '../constant';\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class ContractService {\n  constructor() {\n    var _this = this;\n    this.loader$ = new BehaviorSubject(false);\n    this.getAccounts = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        return yield window.ethereum.request({\n          method: 'eth_accounts'\n        });\n      } catch (e) {\n        return [];\n      }\n    });\n    this.getContract = () => {\n      return new window.web3.eth.Contract(CONSTANTS.abi, CONSTANTS.contractAddress);\n    };\n    // Event can be GameStarted/GameInitiated/GameEnded/PlayerMoved\n    this.parseData = event => {\n      let players = event.returnValues?.room?.players;\n      return {\n        'id': event.returnValues?.gameId,\n        'name': players[0].playerName + \"vs\" + players[1].playerName ?? \"_\",\n        'currentPlayerIndex': event.room.activePlayer,\n        'currentPlayerName': players[event.room.activePlayer ?? 0],\n        'winnerName': event.room.winnerPlayer.playerName,\n        'player1': players[0].playerName,\n        'player2': players[1].playerName,\n        'gameState': this.getState(event.room.gameState),\n        'moveIndex': event.moveIndex,\n        'moveValue': event.room.activePlayer == 0 ? \"X\" : \"0\"\n      };\n    };\n    this.getState = state => {\n      switch (state) {\n        case 0:\n          return \"NOT STARTED\";\n        case 1:\n          return \"RUNNING\";\n        case 2:\n          return \"GAME ENDED WITH WINNER\";\n        default:\n          return \"DRAW\";\n      }\n    };\n    this.openMetamask = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.loader$.next(true);\n      window.web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n      let addresses = yield _this.getAccounts();\n      if (!addresses.length) {\n        try {\n          addresses = yield window.ethereum.enable();\n        } catch (e) {\n          console.log(\"Unable to fetch address\");\n          return false;\n        }\n      }\n      return addresses.length ? addresses[0] : null;\n    });\n    this.joinGame = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (data) {\n        _this.loader$.next(true);\n        let accaddress = yield _this.getAccounts();\n        try {\n          // TODO: Loading State - true;\n          const response = yield _this.getContract().methods.joinRoom({\n            playerAddress: accaddress[0],\n            playerName: data.name\n          }).send({\n            from: accaddress[0]\n          });\n          // TODO: Loading State - false;\n          _this.gameID = response?.events?.GameStarted?.returnValues?.gameId;\n          // Route to \n          return _this.gameID;\n        } catch (error) {\n          const errorMessage = error;\n        }\n      });\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    this.move = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (data) {\n        _this.loader$.next(true);\n        let accaddress = yield _this.getAccounts();\n        try {\n          // TODO: Loading State - true;\n          const response = yield _this.getContract().methods.move(_this.gameID, data).send({\n            from: accaddress[0]\n          });\n          // TODO: Loading State - false;\n          console.log(\"Player moved on \", response?.events?.PlayerMoved?.returnValues?.moveIndex);\n          return response?.events?.PlayerMoved?.returnValues?.moveIndex;\n        } catch (error) {\n          const errorMessage = error;\n        }\n      });\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    this.ping = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (data) {\n        let accaddress = yield _this.getAccounts();\n        try {\n          // TODO: Loading State - true;\n          const response = yield _this.getContract().methods.updateRoomIfExpired(_this.gameID).send({\n            from: accaddress[0]\n          });\n          // TODO: Loading State - false;\n          console.log(\"Game State\", response?.events?.PlayerMoved?.returnValues?.room.state);\n        } catch (error) {\n          const errorMessage = error;\n        }\n      });\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    window.web3 = new Web3(window.ethereum);\n    let options = {\n      filter: {\n        value: []\n      },\n      fromBlock: 0\n    };\n    this.getContract().events.GameEnded(options).on('data', response => console.log(response, \"Ended\"));\n    this.getContract().events.GameStarted(options).on('data', response => console.log(response, \"Started\"));\n    this.getContract().events.GameInitiated(options).on('data', response => console.log(response, \"Initiated\"));\n    this.getContract().events.PlayerMoved(options).on('data', response => console.log(response, \"Move\"));\n  }\n}\nContractService.ɵfac = function ContractService_Factory(t) {\n  return new (t || ContractService)();\n};\nContractService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContractService,\n  factory: ContractService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Web3","CONSTANTS","BehaviorSubject","ContractService","constructor","window","ethereum","request","method","e","web3","eth","Contract","abi","contractAddress","event","players","returnValues","room","gameId","playerName","activePlayer","winnerPlayer","getState","gameState","moveIndex","state","loader$","next","givenProvider","addresses","getAccounts","length","enable","console","log","data","accaddress","response","getContract","methods","joinRoom","playerAddress","name","send","from","gameID","events","GameStarted","error","errorMessage","move","PlayerMoved","updateRoomIfExpired","options","filter","value","fromBlock","GameEnded","on","GameInitiated","factory","providedIn"],"sourceRoot":"","sources":["/Users/pushpendra.khandelwal/Desktop/web3_training/tic-tac-toe/ui/src/app/services/contract.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport Web3 from 'web3';\nimport CONSTANTS from '../constant';\nimport { BehaviorSubject } from \"rxjs\";\n\ndeclare const window: any;\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContractService {\n  public loader$ = new BehaviorSubject<boolean>(false);\n  window: any;\n  gameID: any;\n\n  constructor() {\n    window.web3 = new Web3(window.ethereum);\n\n    let options = {\n      filter: {\n          value: [],\n      },\n      fromBlock: 0\n    }\n    this.getContract().events.GameEnded(options)\n    .on('data', (response: any) => console.log(response, \"Ended\"));\n\n    this.getContract().events.GameStarted(options)\n    .on('data', (response: any) => console.log(response, \"Started\"));\n\n    this.getContract().events.GameInitiated(options)\n    .on('data', (response: any) => console.log(response, \"Initiated\"));\n\n    this.getContract().events.PlayerMoved(options)\n    .on('data', (response: any) => console.log(response, \"Move\"));\n  };\n\n\n  private getAccounts = async () => {\n    try {\n      return await window.ethereum.request({ method: 'eth_accounts' });\n    } catch (e) {\n      return [];\n    }\n  };\n\n  private getContract = () => {\n    return new window.web3.eth.Contract(\n      CONSTANTS.abi,\n      CONSTANTS.contractAddress\n    );\n  };\n\n\n  // Event can be GameStarted/GameInitiated/GameEnded/PlayerMoved\n  public parseData = (event: any) => {\n    let players = event.returnValues?.room?.players;\n    return {\n      'id': event.returnValues?.gameId,\n      'name': players[0].playerName + \"vs\" + players[1].playerName ?? \"_\",\n      'currentPlayerIndex': event.room.activePlayer,\n      'currentPlayerName': players[event.room.activePlayer ?? 0],\n      'winnerName': event.room.winnerPlayer.playerName,\n      'player1': players[0].playerName,\n      'player2': players[1].playerName,\n      'gameState': this.getState(event.room.gameState),\n      'moveIndex': event.moveIndex,\n      'moveValue': event.room.activePlayer == 0 ? \"X\" : \"0\",\n    };\n  }\n\n  private getState = (state: number) => {\n    switch (state) {\n      case 0:\n        return \"NOT STARTED\";\n      case 1:\n        return \"RUNNING\";\n      case 2: \n        return \"GAME ENDED WITH WINNER\";\n      default:\n        return \"DRAW\";      \n    }\n  }\n\n  public openMetamask = async () => {\n    this.loader$.next(true);\n    window.web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n    let addresses = await this.getAccounts();\n    if (!addresses.length) {\n      try {\n        addresses = await window.ethereum.enable();\n      } catch (e) {\n        console.log(\"Unable to fetch address\");\n        return false;\n      }\n    }\n    return addresses.length ? addresses[0] : null;\n  };\n\n  public joinGame = async (data: any) => {\n    this.loader$.next(true);\n    let accaddress = await this.getAccounts();\n    try {\n      // TODO: Loading State - true;\n      const response = await this.getContract().methods\n        .joinRoom({ playerAddress: accaddress[0], playerName: data.name })\n        .send({ from: accaddress[0] });\n\n      // TODO: Loading State - false;\n\n      this.gameID = response?.events?.GameStarted?.returnValues?.gameId;\n\n      // Route to \n      return this.gameID;\n    } catch (error) {\n      const errorMessage = error;\n    }\n  };\n\n  public move = async (data: any) => {\n    this.loader$.next(true);\n    let accaddress = await this.getAccounts();\n    try {\n      // TODO: Loading State - true;\n      const response = await this.getContract().methods\n        .move(this.gameID, data)\n        .send({ from: accaddress[0] });\n      // TODO: Loading State - false;\n      console.log(\"Player moved on \", response?.events?.PlayerMoved?.returnValues?.moveIndex);\n\n      return response?.events?.PlayerMoved?.returnValues?.moveIndex;\n    } catch (error) {\n      const errorMessage = error;\n    }\n  };\n\n  public ping = async (data: any) => {\n    let accaddress = await this.getAccounts();\n    try {\n      // TODO: Loading State - true;\n      const response = await this.getContract().methods\n        .updateRoomIfExpired(this.gameID)\n        .send({ from: accaddress[0] });\n      // TODO: Loading State - false;\n      console.log(\"Game State\", response?.events?.PlayerMoved?.returnValues?.room.state);\n    } catch (error) {\n      const errorMessage = error;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}